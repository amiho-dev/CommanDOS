# Enhanced FileManager App for CommanDOS
# This is a comprehensive example of the .cdos format

# App Metadata - Required
APP_INFO = {
    "name": "FileManager",
    "version": "2.0",
    "author": "CommanDOS Team",
    "description": "Advanced file management utility with search and operations",
    "category": "utility",
    "icon": "üìÅ",
    "min_system_version": "1.0"
}

import os
import datetime
import shutil
import fnmatch

# Main app function - Required
def run(args):
    """
    Main entry point for FileManager
    
    Args:
        args: List of command line arguments
    
    Returns:
        int: Exit code (0 = success, 1+ = error)
    """
    if not args:
        show_help()
        return 0
    
    # Command routing
    commands = {
        'list': cmd_list,
        'ls': cmd_list,       # Alias
        'info': cmd_info,
        'copy': cmd_copy,
        'cp': cmd_copy,       # Alias
        'move': cmd_move,
        'mv': cmd_move,       # Alias
        'delete': cmd_delete,
        'rm': cmd_delete,     # Alias
        'mkdir': cmd_mkdir,
        'search': cmd_search,
        'find': cmd_search,   # Alias
        'tree': cmd_tree,
        'help': lambda x: show_help()
    }
    
    command = args[0].lower()
    if command in commands:
        try:
            return commands[command](args[1:])
        except Exception as e:
            print(f"Error executing {command}: {e}")
            return 1
    else:
        print(f"Unknown command: {command}")
        print("Use 'fm help' for available commands")
        return 1

def show_help():
    """Display comprehensive help information"""
    print(f"\n{APP_INFO['name']} v{APP_INFO['version']}")
    print("="*50)
    print(APP_INFO['description'])
    print("\nCommands:")
    print("  fm list [path]              - List files and directories")
    print("  fm info <file>              - Show detailed file information")
    print("  fm copy <source> <dest>     - Copy file or directory")
    print("  fm move <source> <dest>     - Move/rename file or directory")
    print("  fm delete <file>            - Delete file or directory")
    print("  fm mkdir <name>             - Create new directory")
    print("  fm search <pattern> [path]  - Search for files matching pattern")
    print("  fm tree [path] [depth]      - Show directory tree")
    print("  fm help                     - Show this help")
    
    print("\nAliases:")
    print("  ls = list, cp = copy, mv = move, rm = delete, find = search")
    
    print("\nExamples:")
    print("  fm list /home              # List files in /home")
    print("  fm copy file.txt backup/   # Copy file to backup directory")
    print("  fm search '*.py'           # Find all Python files")
    print("  fm tree . 2                # Show directory tree (depth 2)")

def cmd_list(args):
    """List directory contents with detailed information"""
    path = args[0] if args else "."
    
    try:
        if not os.path.exists(path):
            print(f"Path not found: {path}")
            return 1
        
        if not os.path.isdir(path):
            print(f"Not a directory: {path}")
            return 1
        
        items = os.listdir(path)
        abs_path = os.path.abspath(path)
        
        print(f"\nContents of {abs_path}")
        print("-" * min(len(abs_path) + 12, 60))
        
        if not items:
            print("  <empty directory>")
            return 0
        
        # Separate and sort directories and files
        dirs = []
        files = []
        
        for item in items:
            item_path = os.path.join(path, item)
            try:
                if os.path.isdir(item_path):
                    dirs.append(item)
                else:
                    stat = os.stat(item_path)
                    files.append({
                        'name': item,
                        'size': stat.st_size,
                        'modified': datetime.datetime.fromtimestamp(stat.st_mtime)
                    })
            except:
                # Handle permission errors gracefully
                files.append({
                    'name': item,
                    'size': 0,
                    'modified': datetime.datetime.now()
                })
        
        # Display directories first
        for d in sorted(dirs):
            print(f"  üìÅ {d}/")
        
        # Display files with details
        for f in sorted(files, key=lambda x: x['name']):
            size_str = format_size(f['size'])
            date_str = f['modified'].strftime("%Y-%m-%d %H:%M")
            print(f"  üìÑ {f['name']:<30} {size_str:>10} {date_str}")
        
        print(f"\nTotal: {len(dirs)} directories, {len(files)} files")
        return 0
        
    except PermissionError:
        print(f"Permission denied: {path}")
        return 1
    except Exception as e:
        print(f"Error listing directory: {e}")
        return 1

def cmd_info(args):
    """Show detailed file/directory information"""
    if not args:
        print("Usage: fm info <file_or_directory>")
        return 1
    
    path = args[0]
    
    try:
        if not os.path.exists(path):
            print(f"File not found: {path}")
            return 1
        
        stat = os.stat(path)
        abs_path = os.path.abspath(path)
        
        print(f"\nFile Information:")
        print("="*30)
        print(f"Name: {os.path.basename(path)}")
        print(f"Path: {abs_path}")
        print(f"Type: {'Directory' if os.path.isdir(path) else 'File'}")
        print(f"Size: {format_size(stat.st_size)}")
        
        # Timestamps
        created = datetime.datetime.fromtimestamp(stat.st_ctime)
        modified = datetime.datetime.fromtimestamp(stat.st_mtime)
        accessed = datetime.datetime.fromtimestamp(stat.st_atime)
        
        print(f"Created:  {created.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Modified: {modified.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Accessed: {accessed.strftime('%Y-%m-%d %H:%M:%S')}")
        
        # Directory-specific info
        if os.path.isdir(path):
            try:
                items = os.listdir(path)
                dirs = sum(1 for item in items if os.path.isdir(os.path.join(path, item)))
                files = len(items) - dirs
                print(f"Contains: {dirs} directories, {files} files")
            except PermissionError:
                print("Contains: <access denied>")
        
        return 0
        
    except Exception as e:
        print(f"Error getting file info: {e}")
        return 1

def cmd_copy(args):
    """Copy files or directories"""
    if len(args) < 2:
        print("Usage: fm copy <source> <destination>")
        return 1
    
    source = args[0]
    dest = args[1]
    
    try:
        if not os.path.exists(source):
            print(f"Source not found: {source}")
            return 1
        
        if os.path.isdir(source):
            if os.path.exists(dest):
                dest = os.path.join(dest, os.path.basename(source))
            shutil.copytree(source, dest)
            print(f"Directory copied: {source} -> {dest}")
        else:
            if os.path.isdir(dest):
                dest = os.path.join(dest, os.path.basename(source))
            shutil.copy2(source, dest)
            print(f"File copied: {source} -> {dest}")
        
        return 0
        
    except FileExistsError:
        print(f"Destination already exists: {dest}")
        return 1
    except PermissionError:
        print("Permission denied")
        return 1
    except Exception as e:
        print(f"Error copying: {e}")
        return 1

def cmd_search(args):
    """Search for files matching a pattern"""
    if not args:
        print("Usage: fm search <pattern> [search_path]")
        print("Examples:")
        print("  fm search '*.py'        # Find Python files")
        print("  fm search 'test*' /home # Find files starting with 'test' in /home")
        return 1
    
    pattern = args[0]
    search_path = args[1] if len(args) > 1 else "."
    
    try:
        if not os.path.exists(search_path):
            print(f"Search path not found: {search_path}")
            return 1
        
        print(f"\nSearching for '{pattern}' in {os.path.abspath(search_path)}")
        print("-" * 50)
        
        matches = []
        for root, dirs, files in os.walk(search_path):
            # Search in files
            for file in files:
                if fnmatch.fnmatch(file, pattern):
                    full_path = os.path.join(root, file)
                    try:
                        size = os.path.getsize(full_path)
                        matches.append((full_path, size, 'file'))
                    except:
                        matches.append((full_path, 0, 'file'))
            
            # Search in directory names
            for dir_name in dirs:
                if fnmatch.fnmatch(dir_name, pattern):
                    full_path = os.path.join(root, dir_name)
                    matches.append((full_path, 0, 'dir'))
        
        if not matches:
            print("No matches found")
            return 0
        
        # Display results
        for path, size, item_type in sorted(matches):
            icon = "üìÅ" if item_type == 'dir' else "üìÑ"
            if item_type == 'dir':
                print(f"  {icon} {path}/")
            else:
                size_str = format_size(size)
                print(f"  {icon} {path} ({size_str})")
        
        print(f"\nFound {len(matches)} match{'es' if len(matches) != 1 else ''}")
        return 0
        
    except Exception as e:
        print(f"Error during search: {e}")
        return 1

def cmd_tree(args):
    """Display directory tree structure"""
    path = args[0] if args else "."
    max_depth = int(args[1]) if len(args) > 1 and args[1].isdigit() else 3
    
    try:
        if not os.path.exists(path):
            print(f"Path not found: {path}")
            return 1
        
        if not os.path.isdir(path):
            print(f"Not a directory: {path}")
            return 1
        
        print(f"\nDirectory tree for {os.path.abspath(path)} (max depth: {max_depth})")
        print("="*60)
        
        def print_tree(current_path, prefix="", depth=0):
            if depth >= max_depth:
                return
            
            try:
                items = sorted(os.listdir(current_path))
                dirs = [item for item in items if os.path.isdir(os.path.join(current_path, item))]
                files = [item for item in items if not os.path.isdir(os.path.join(current_path, item))]
                
                # Print directories first
                for i, d in enumerate(dirs):
                    is_last_dir = (i == len(dirs) - 1) and not files
                    connector = "‚îî‚îÄ‚îÄ " if is_last_dir else "‚îú‚îÄ‚îÄ "
                    print(f"{prefix}{connector}üìÅ {d}/")
                    
                    extension = "    " if is_last_dir else "‚îÇ   "
                    print_tree(os.path.join(current_path, d), prefix + extension, depth + 1)
                
                # Print files
                for i, f in enumerate(files):
                    is_last = i == len(files) - 1
                    connector = "‚îî‚îÄ‚îÄ " if is_last else "‚îú‚îÄ‚îÄ "
                    print(f"{prefix}{connector}üìÑ {f}")
                    
            except PermissionError:
                print(f"{prefix}‚îú‚îÄ‚îÄ <access denied>")
        
        print(f"üìÅ {os.path.basename(path) or path}/")
        print_tree(path)
        return 0
        
    except Exception as e:
        print(f"Error generating tree: {e}")
        return 1

def cmd_mkdir(args):
    """Create new directory"""
    if not args:
        print("Usage: fm mkdir <directory_name>")
        return 1
    
    dir_name = args[0]
    
    try:
        os.makedirs(dir_name, exist_ok=False)
        print(f"Directory created: {dir_name}")
        return 0
    except FileExistsError:
        print(f"Directory already exists: {dir_name}")
        return 1
    except PermissionError:
        print("Permission denied")
        return 1
    except Exception as e:
        print(f"Error creating directory: {e}")
        return 1

def cmd_move(args):
    """Move/rename files or directories"""
    if len(args) < 2:
        print("Usage: fm move <source> <destination>")
        return 1
    
    source = args[0]
    dest = args[1]
    
    try:
        if not os.path.exists(source):
            print(f"Source not found: {source}")
            return 1
        
        if os.path.isdir(dest):
            dest = os.path.join(dest, os.path.basename(source))
        
        shutil.move(source, dest)
        print(f"Moved: {source} -> {dest}")
        return 0
        
    except FileExistsError:
        print(f"Destination already exists: {dest}")
        return 1
    except PermissionError:
        print("Permission denied")
        return 1
    except Exception as e:
        print(f"Error moving: {e}")
        return 1

def cmd_delete(args):
    """Delete files or directories"""
    if not args:
        print("Usage: fm delete <file_or_directory>")
        return 1
    
    target = args[0]
    
    try:
        if not os.path.exists(target):
            print(f"File not found: {target}")
            return 1
        
        # Confirmation for directories
        if os.path.isdir(target):
            items = len(os.listdir(target))
            if items > 0:
                confirm = input(f"Delete directory '{target}' and its {items} items? (yes/no): ")
                if confirm.lower() != 'yes':
                    print("Delete cancelled")
                    return 0
            shutil.rmtree(target)
            print(f"Directory deleted: {target}")
        else:
            os.remove(target)
            print(f"File deleted: {target}")
        
        return 0
        
    except PermissionError:
        print("Permission denied")
        return 1
    except Exception as e:
        print(f"Error deleting: {e}")
        return 1

def format_size(size_bytes):
    """Format file size in human readable format"""
    if size_bytes == 0:
        return "0 B"
    
    units = ['B', 'KB', 'MB', 'GB', 'TB']
    unit_index = 0
    size = float(size_bytes)
    
    while size >= 1024.0 and unit_index < len(units) - 1:
        size /= 1024.0
        unit_index += 1
    
    if unit_index == 0:
        return f"{int(size)} {units[unit_index]}"
    else:
        return f"{size:.1f} {units[unit_index]}"

# Optional: Installation hook
def install():
    """Called when the app is installed"""
    print("FileManager installed successfully!")
    print("Use 'fm help' to see available commands")
    return True

# Optional: Uninstallation hook
def uninstall():
    """Called when the app is uninstalled"""
    print("FileManager uninstalled")
    return True
